
# fooparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AP BEGIN BOOLEAN DIV DO DOIS_PONTOS ELSE END FALSE FIM_LINHA FP ID IF INT MAIOR MAIOR_IGUAL MENOR MENOR_IGUAL OPDIV OPIGUAL_ATRIB OPIGUAL_COMP OPMUL OPSOMA OPSUB OR PONTO_FINAL PROCEDURE PROGRAM READ REAL SEPARADOR THEN TRUE VAR WHILE WRITEexpression : expression OPSOMA termexpression : expression OPSUB termexpression : termterm : term OPMUL factorterm : term OPDIV factorterm : factorfactor : INTfactor : AP expression FP'
    
_lr_action_items = {'INT':([0,5,6,7,8,9,],[4,4,4,4,4,4,]),'AP':([0,5,6,7,8,9,],[5,5,5,5,5,5,]),'$end':([1,2,3,4,11,12,13,14,15,],[0,-3,-6,-7,-1,-2,-4,-5,-8,]),'OPSOMA':([1,2,3,4,10,11,12,13,14,15,],[6,-3,-6,-7,6,-1,-2,-4,-5,-8,]),'OPSUB':([1,2,3,4,10,11,12,13,14,15,],[7,-3,-6,-7,7,-1,-2,-4,-5,-8,]),'FP':([2,3,4,10,11,12,13,14,15,],[-3,-6,-7,15,-1,-2,-4,-5,-8,]),'OPMUL':([2,3,4,11,12,13,14,15,],[8,-6,-7,8,8,-4,-5,-8,]),'OPDIV':([2,3,4,11,12,13,14,15,],[9,-6,-7,9,9,-4,-5,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,],[1,10,]),'term':([0,5,6,7,],[2,2,11,12,]),'factor':([0,5,6,7,8,9,],[3,3,3,3,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OPSOMA term','expression',3,'p_expression_plus','parser.py',17),
  ('expression -> expression OPSUB term','expression',3,'p_expression_minus','parser.py',21),
  ('expression -> term','expression',1,'p_expression_term','parser.py',25),
  ('term -> term OPMUL factor','term',3,'p_term_times','parser.py',29),
  ('term -> term OPDIV factor','term',3,'p_term_div','parser.py',33),
  ('term -> factor','term',1,'p_term_factor','parser.py',37),
  ('factor -> INT','factor',1,'p_factor_num','parser.py',41),
  ('factor -> AP expression FP','factor',3,'p_factor_expr','parser.py',45),
]
